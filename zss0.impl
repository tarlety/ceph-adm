#!/bin/bash

# zss interface

case $1 in
	"app")
		PROJECTNAME=zerus
		APPNAME=ceph-adm
		APPVERSION=0.1.10
		;;
	"config")
		CONFIGKEYS="network nodeadm monitors osdmap mdsnode pgnum"
		declare -A CONFIG_DESCRIPTIONS
		CONFIG_DESCRIPTIONS=( \
			["network"]="network of all ceph nodes." \
			["nodeadm"]="to provide the control to all nodes." \
			["monitors"]="the ceph monitor nodes." \
			["osdmap"]="to provide the control to all nodes." \
			["mdsnode"]="the ceph mds node." \
			["pgnum"]="the pgnum of ceph mds pools." \
			)

		DEFAULT_NETWORK=10.13.13.0/24
		DEFAULT_NODEADM=../node_adm
		DEFAULT_MONITORS="u1 u2 u3"
		DEFAULT_OSDMAP='( ["u1"]="/dev/sdb" ["u2"]="/dev/sdb" ["u3"]="/dev/sdb" ["u4"]="/dev/sdb" ["u5"]="/dev/sdb" )'
		DEFAULT_MDSNODE="u1"
		DEFAULT_PGNUM="256"

		declare -A OSDMAP
		;;
	"vars")
		CEPH_FILE=${SECRET}/ceph.tgz.enc
		;;
	"requirement")
		echo - node-adm: $(${NODEADM}/zss0 version)
		echo - kubectl: $(which kubectl)
		;;
	"secret-create")
		SEEDNODE=$(echo ${MONITORS} | cut -d' ' -f1)
		SEEDNODEIP=$(cat /etc/hosts | grep -P "[\t ]*${SEEDNODE}( |$)" | cut -d' ' -f1)
		MONS=$($0 mons)
		MONSIP=$($0 monsip)

		cd ${NODEADM}
		./zss0 exec ${SEEDNODE} "
			cd ~/docker-apps/storage/ceph ;
			./ws mon ${SEEDNODEIP} ${NETWORK} ;
			"
		for ROLE in osd mds rbd rgw
		do
			while ./zss0 exec ${SEEDNODE} "[ ! -f ~/store/ceph/var/lib/ceph/bootstrap-${ROLE}/ceph.keyring ]"
			do
				echo Waiting bootstrap-${ROLE}/ceph.keyring...
				sleep 1
			done
		done
		cd - &> /dev/null

		./zss0 remons

		cd ${NODEADM}
		./zss0 exec ${SEEDNODE} "
			cd ~/docker-apps/storage/ceph ;
			./ws clean ;
			./ws reconfig-mons ${MONS} ${MONSIP} ;
			sudo rm -rf ~/store/ceph/var/lib/ceph/mon ;
			"
		rm -f ${CEPH_FILE}
		./zss0 exec ${SEEDNODE} "sudo tar -zcpf - -C ~/store/ceph ." | gpg -ear ${GPGKEY} -o ${CEPH_FILE}
		./zss0 exec ${SEEDNODE} "sudo rm -rf ~/store/ceph"
		cd - &> /dev/null
		;;
	"state-data-save")
		;;
	"state-secret-load-post")
		;;
	"state-data-load")
		;;
	# AppImplementing Section: commands
	#------------------------------------------------------------------------------
	"command")
		shift
		case $1 in
		"nodes")
			shift
			declare -A NODES
			for NODE in ${MONITORS} ${MDSNODE} ${!OSDMAP[@]}
			do
				NODES[$NODE]=1
			done
			echo ${!NODES[@]}
			;;
		"mons")
			echo $($0 env MONITORS | cut -d: -f2) | sed 's/ /,/g'
			;;
		"monsip")
			for mon in $($0 env MONITORS)
			do
				echo -n "$(cat /etc/hosts | grep -P "[\t ]*${mon}( |$)" | cut -d' ' -f1) "
			done | sed 's/ \([^$]\)/,\1/g'
			;;
		"preflight")
			shift
			NODES=${*:-$($0 nodes)}
			echo ${NODES} preflight...
			cd ${NODEADM}
			for NODE in ${NODES}
			do
				./zss0 exec ${NODE} "sudo mkdir -p ~/store/ceph"
				gpg -d ${CEPH_FILE} | ./zss0 exec ${NODE} "sudo tar zxpf - -C ~/store/ceph"
				./zss0 exec ${NODE} "
					sudo cp -rf ~/store/ceph/etc/ceph/* /etc/ceph ;
					sudo cp -rf ~/store/ceph/var/lib/ceph/* /etc/ceph ;
					sudo rm -rf ~/store/ceph
					"
			done
			cd - &> /dev/null
			;;
		"remons")
			shift
			NODES=${*:-$($0 nodes)}
			MONS=$($0 mons)
			MONSIP=$($0 monsip)
			cd ${NODEADM}
			for NODE in ${NODES}
			do
				./zss0 exec ${NODE} "
					sudo sed -i -e 's/^mon initial members = .*/mon initial members = ${MONS}/' /etc/ceph/ceph.conf ;
					sudo sed -i -e 's/^mon host = .*/mon host = ${MONSIP}/' /etc/ceph/ceph.conf ;
					"
			done
			cd - &> /dev/null
			;;
		"clean")
			shift
			$0 mds down
			$0 osd down
			$0 mon down
			$0 mds clean
			$0 osd clean
			$0 mon clean
			;;
		"network")
			shift
			ONOFF=$1
			shift
			NODES=${*:-$($0 nodes)}

			cd ${NODEADM}
			for NODE in ${NODES}
			do
				case ${ONOFF} in
				"up")
					NODEIP=$(grep -P "[\t ]*${NODE}( |$)" /etc/hosts | head -1 | cut -d' ' -f1)
					./zss0 exec-for-all "
						sudo ufw allow from ${NODEIP} to any proto tcp port 111,3300,6789,6800:7300 comment 'ceph-adm' ;
						"
					;;
				"down")
					RULENUM=$(./zss0 exec ${NODE} "sudo ufw status numbered | grep ceph-adm | head -1 | cut -d] -f1 | cut -d[ -f2")
					while [ "${RULENUM}" != "" ]
					do
						echo y | ./zss0 exec ${NODE} "sudo ufw delete ${RULENUM}"
						RULENUM=$(./zss0 exec ${NODE} "sudo ufw status numbered | grep ceph-adm | head -1 | cut -d] -f1 | cut -d[ -f2")
					done
					;;
				"status")
					./zss0 exec ${NODE} "sudo ufw status numbered | grep 'ceph-adm'"
					;;
				*)
					$0 ; exit 1
					;;
				esac
			done
			cd - &> /dev/null
			;;
		"mon")
			# https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/1.2.3/html/red_hat_ceph_administration_guide/remove_a_monitor
			# http://docs.ceph.com/docs/mimic/mgr/administrator/
			shift
			NODES=${2:-${MONITORS}}
			case $1 in
			"up")
				for NODE in ${NODES}
				do
					echo UP ${NODE}.mon ${NODE}.mgr
					NODEIP=$(cat /etc/hosts | grep -P "[\t ]*${NODE}( |$)" | cut -d' ' -f1)
					cd ${NODEADM}
					./zss0 exec ${NODE} "
						cd ~/docker-apps/storage/ceph ;
						./ws mon ${NODEIP} ${NETWORK} ;
						./ws mgr ;
						"
					cd - &> /dev/null
				done
				;;
			"down")
				for NODE in ${NODES}
				do
					echo DOWN ${NODE}.mon ${NODE}.mgr
					cd ${NODEADM}
					./zss0 exec ${NODE} "
						cd ~/docker-apps/storage/ceph ;
						docker stop mgr ; docker rm mgr ;
						docker stop mon ; docker rm mon ;
						"
					cd - &> /dev/null
				done
				;;
			"rm")
				for NODE in ${NODES}
				do
					echo REMOVE ${NODE} from mgr
					$0 ceph mgr fail ${NODE}
					echo REMOVE ${NODE} from mon
					$0 ceph mon remove ${NODE}
				done
				;;
			"clean")
				for NODE in ${NODES}
				do
					echo CLEAN ${NODE}.mon ${NODE}.mgr
					cd ${NODEADM}
					./zss0 exec ${NODE} "
						sudo rm -rf /var/lib/ceph/mon/*
						sudo rm -rf /var/lib/ceph/mgr/*
						"
					cd - &> /dev/null
				done
				;;
			*)
				$0 ; exit 1
				;;
			esac
			;;
		"osd")
			# http://docs.ceph.com/docs/mimic/rados/operations/add-or-rm-osds/
			shift
			NODES=${2:-${!OSDMAP[@]}}
			case $1 in
			"up")
				for NODE in ${NODES}
				do
					OSDDEVS=${3:-${OSDMAP[${NODE}]}}
					echo UP ${NODE}.osd ${OSDDEVS}
					cd ${NODEADM}
					./zss0 exec ${NODE} "
						cd ~/docker-apps/storage/ceph ;
						./ws osds ${OSDDEVS} ;
						"
					cd - &> /dev/null
				done
				;;
			"down")
				for NODE in ${NODES}
				do
					OSDDEVS=${3:-${OSDMAP[${NODE}]}}
					cd ${NODEADM}
					for OSDDEV in ${OSDDEVS}
					do
						echo DOWN ${NODE}.osd ${OSDDEV}
						./zss0 exec ${NODE} "
							cd ~/docker-apps/storage/ceph ;
							./ws osd-down ${OSDDEV} ;
							"
					done
					cd - &> /dev/null
				done
				;;
			"rm")
				shift
				IDS=$*
				for ID in ${IDS}
				do
					echo RM osd.${ID}
					$0 ceph osd down $ID
					$0 ceph osd out $ID
					$0 ceph osd crush remove osd.$ID
					$0 ceph osd rm $ID
					$0 ceph auth del osd.$ID
				done
				;;
			"clean")
				for NODE in ${NODES}
				do
					OSDDEVS=${3:-${OSDMAP[${NODE}]}}
					cd ${NODEADM}
					echo CLEAN ${NODE}.osd ${OSDDEVS}
					./zss0 exec ${NODE} "
						cd ~/docker-apps/storage/ceph ;
						./ws osd-zap ${OSDDEVS} ;
						"
					cd - &> /dev/null
				done
				;;
			*)
				$0 ; exit 1
				;;
			esac
			;;
		"mds")
			shift
			ACTION=$1
			NODES=${2:-${MDSNODE}}
			case ${ACTION} in
			"up")
				cd ${NODEADM}
				for NODE in ${NODES}
				do
					echo UP ${NODE}.mds
					./zss0 exec ${NODE} "
						cd ~/docker-apps/storage/ceph ;
						./ws mds ${PGNUM}
						"
				done
				cd - &> /dev/null
				;;
			"down")
				cd ${NODEADM}
				for NODE in ${NODES}
				do
					echo DOWN ${NODE}.mds
					./zss0 exec ${NODE} "
						cd ~/docker-apps/storage/ceph ;
						docker stop mds ; docker rm mds ;
						"
				done
				cd - &> /dev/null
				;;
			"rm")
				$0 ceph tell mon.\* injectargs '--mon-allow-pool-delete=true'
				$0 ceph mds fail 0
				$0 ceph fs rm cephfs --yes-i-really-mean-it
				$0 ceph osd pool delete cephfs_data cephfs_data --yes-i-really-really-mean-it
				$0 ceph osd pool delete cephfs_metadata cephfs_metadata --yes-i-really-really-mean-it
				;;
			"clean")
				cd ${NODEADM}
				for NODE in ${NODES}
				do
					./zss0 exec ${NODE} "
						sudo rm -rf /var/lib/ceph/mds/*
						" && break
				done
				cd - &> /dev/null
				;;
			*)
				$0 ; exit 1
				;;
			esac
			;;
		"mdsmount")
			shift
			ACTIVEMDS=$($0 mons)
			NODES=$*
			cd ${NODEADM}
			if [ -z "${NODES}" ]; then
				./zss0 exec-for-all "
					cd ~/docker-apps/storage/ceph ;
					./ws mdsmount ${ACTIVEMDS} ;
					"
			else
				for NODE in ${NODES}
				do
					./zss0 exec ${NODE} "
						cd ~/docker-apps/storage/ceph ;
						./ws mdsmount ${ACTIVEMDS} ;
						"
				done
			fi
			cd - &> /dev/null
			;;
		"ceph")
			shift
			COMMANDS=$*
			cd ${NODEADM}
			NODES=${MONITORS}
			for NODE in ${NODES}
			do
				./zss0 exec ${NODE} "docker exec mon ceph ${COMMANDS}" && break
			done
			cd - &> /dev/null
			;;
		"kube-secret")
			shift
			NAMESPACE=${2:-default}
			case $1 in
			"up")
				kubectl get secret -n ${NAMESPACE} | grep ceph-secret
				if [ $? -eq 1 ]
				then
					KEY=$(gpg -d ${CEPH_FILE} | tar zxf - ./etc/ceph/ceph.client.admin.keyring -O | grep key | cut -d= -f2-)
					cat <<EOF | kubectl create -f -
apiVersion: v1
data:
  key: $(echo ${KEY} | base64)
kind: Secret
metadata:
  name: ceph-secret
  namespace: ${NAMESPACE}
type: Opaque
EOF
				fi
				;;
			"down")
				kubectl delete secret ceph-secret -n ${NAMESPACE}
				;;
			esac
			;;
		esac
		;;
	#------------------------------------------------------------------------------
	"usage")
		echo $(basename $0) "[nodes/mons/monsip]"
		echo $(basename $0) "[preflight/clean/remons] [nodes]"
		echo $(basename $0) "network [up/down/status] [nodes]"
		echo $(basename $0) "mon [up/down/rm/clean] [nodes]"
		echo $(basename $0) "osd [up/down/clean] [node] [devices...]"
		echo $(basename $0) "osd rm [device ids...]"
		echo $(basename $0) "mds [up/down/clean] [nodes]"
		echo $(basename $0) "mds rm"
		echo "    up: bring up the role."
		echo "    down: close the role."
		echo "    rm: remove the role from cluster."
		echo "    clean: clean all data of the role."
		echo $(basename $0) "mdsmount [nodes]"
		echo $(basename $0) "ceph ..."
		echo $(basename $0) "kube-secret [up/down] [namespace]"
		echo ""
		echo "How to Bootstrap:"
		echo "1. ./$(basename $0) config ..."
		echo "2. ./$(basename $0) secret-create"
		echo "3. ./$(basename $0) network up"
		echo "4. ./$(basename $0) preflight"
		echo "5. ./$(basename $0) mon up"
		echo "6. ./$(basename $0) osd clean"
		echo "7. ./$(basename $0) osd up"
		echo "8. ./$(basename $0) mds up"
		echo "9. ./$(basename $0) mdsmount"
		;;
esac

